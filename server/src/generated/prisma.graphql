# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type CustomOperation implements Node {
  id: ID!
  name: String!
  params: Json
  permission(where: PermissionWhereInput): Permission
}

type Permission implements Node {
  id: ID!
  name: String!
  type: PermissionType!
  resourceName: String
  allowedOperation: CrudOperation
  customOperation(where: CustomOperationWhereInput): CustomOperation
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  groups(where: PermissionGroupWhereInput, orderBy: PermissionGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PermissionGroup!]
}

type PermissionGroup implements Node {
  id: ID!
  name: String!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  role: Role!
  groups(where: PermissionGroupWhereInput, orderBy: PermissionGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PermissionGroup!]
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission!]
  createdAt: DateTime!
  updatedAt: DateTime!
}


#
# Other Types
#

type AggregateCustomOperation {
  count: Int!
}

type AggregatePermission {
  count: Int!
}

type AggregatePermissionGroup {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

enum CrudOperation {
  CREATE
  READ
  UPDATE
  DELETE
}

type CustomOperationConnection {
  pageInfo: PageInfo!
  edges: [CustomOperationEdge]!
  aggregate: AggregateCustomOperation!
}

input CustomOperationCreateInput {
  name: String!
  params: Json
  permission: PermissionCreateOneWithoutCustomOperationInput
}

input CustomOperationCreateOneWithoutPermissionInput {
  create: CustomOperationCreateWithoutPermissionInput
  connect: CustomOperationWhereUniqueInput
}

input CustomOperationCreateWithoutPermissionInput {
  name: String!
  params: Json
}

type CustomOperationEdge {
  node: CustomOperation!
  cursor: String!
}

enum CustomOperationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  params_ASC
  params_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CustomOperationPreviousValues {
  id: ID!
  name: String!
  params: Json
}

type CustomOperationSubscriptionPayload {
  mutation: MutationType!
  node: CustomOperation
  updatedFields: [String!]
  previousValues: CustomOperationPreviousValues
}

input CustomOperationSubscriptionWhereInput {
  AND: [CustomOperationSubscriptionWhereInput!]
  OR: [CustomOperationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CustomOperationWhereInput
}

input CustomOperationUpdateInput {
  name: String
  params: Json
  permission: PermissionUpdateOneWithoutCustomOperationInput
}

input CustomOperationUpdateOneWithoutPermissionInput {
  create: CustomOperationCreateWithoutPermissionInput
  connect: CustomOperationWhereUniqueInput
  disconnect: CustomOperationWhereUniqueInput
  delete: CustomOperationWhereUniqueInput
  update: CustomOperationUpdateWithoutPermissionInput
  upsert: CustomOperationUpsertWithoutPermissionInput
}

input CustomOperationUpdateWithoutPermissionDataInput {
  name: String
  params: Json
}

input CustomOperationUpdateWithoutPermissionInput {
  where: CustomOperationWhereUniqueInput!
  data: CustomOperationUpdateWithoutPermissionDataInput!
}

input CustomOperationUpsertWithoutPermissionInput {
  where: CustomOperationWhereUniqueInput!
  update: CustomOperationUpdateWithoutPermissionDataInput!
  create: CustomOperationCreateWithoutPermissionInput!
}

input CustomOperationWhereInput {
  AND: [CustomOperationWhereInput!]
  OR: [CustomOperationWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  permission: PermissionWhereInput
}

input CustomOperationWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

scalar Json

scalar Long

type Mutation {
  createCustomOperation(data: CustomOperationCreateInput!): CustomOperation!
  createPermission(data: PermissionCreateInput!): Permission!
  createPermissionGroup(data: PermissionGroupCreateInput!): PermissionGroup!
  createUser(data: UserCreateInput!): User!
  updateCustomOperation(data: CustomOperationUpdateInput!, where: CustomOperationWhereUniqueInput!): CustomOperation
  updatePermission(data: PermissionUpdateInput!, where: PermissionWhereUniqueInput!): Permission
  updatePermissionGroup(data: PermissionGroupUpdateInput!, where: PermissionGroupWhereUniqueInput!): PermissionGroup
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteCustomOperation(where: CustomOperationWhereUniqueInput!): CustomOperation
  deletePermission(where: PermissionWhereUniqueInput!): Permission
  deletePermissionGroup(where: PermissionGroupWhereUniqueInput!): PermissionGroup
  deleteUser(where: UserWhereUniqueInput!): User
  upsertCustomOperation(where: CustomOperationWhereUniqueInput!, create: CustomOperationCreateInput!, update: CustomOperationUpdateInput!): CustomOperation!
  upsertPermission(where: PermissionWhereUniqueInput!, create: PermissionCreateInput!, update: PermissionUpdateInput!): Permission!
  upsertPermissionGroup(where: PermissionGroupWhereUniqueInput!, create: PermissionGroupCreateInput!, update: PermissionGroupUpdateInput!): PermissionGroup!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyCustomOperations(data: CustomOperationUpdateInput!, where: CustomOperationWhereInput!): BatchPayload!
  updateManyPermissions(data: PermissionUpdateInput!, where: PermissionWhereInput!): BatchPayload!
  updateManyPermissionGroups(data: PermissionGroupUpdateInput!, where: PermissionGroupWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyCustomOperations(where: CustomOperationWhereInput!): BatchPayload!
  deleteManyPermissions(where: PermissionWhereInput!): BatchPayload!
  deleteManyPermissionGroups(where: PermissionGroupWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PermissionConnection {
  pageInfo: PageInfo!
  edges: [PermissionEdge]!
  aggregate: AggregatePermission!
}

input PermissionCreateInput {
  name: String!
  type: PermissionType!
  resourceName: String
  allowedOperation: CrudOperation
  customOperation: CustomOperationCreateOneWithoutPermissionInput
  users: UserCreateManyWithoutPermissionsInput
  groups: PermissionGroupCreateManyWithoutPermissionsInput
}

input PermissionCreateManyWithoutGroupsInput {
  create: [PermissionCreateWithoutGroupsInput!]
  connect: [PermissionWhereUniqueInput!]
}

input PermissionCreateManyWithoutUsersInput {
  create: [PermissionCreateWithoutUsersInput!]
  connect: [PermissionWhereUniqueInput!]
}

input PermissionCreateOneWithoutCustomOperationInput {
  create: PermissionCreateWithoutCustomOperationInput
  connect: PermissionWhereUniqueInput
}

input PermissionCreateWithoutCustomOperationInput {
  name: String!
  type: PermissionType!
  resourceName: String
  allowedOperation: CrudOperation
  users: UserCreateManyWithoutPermissionsInput
  groups: PermissionGroupCreateManyWithoutPermissionsInput
}

input PermissionCreateWithoutGroupsInput {
  name: String!
  type: PermissionType!
  resourceName: String
  allowedOperation: CrudOperation
  customOperation: CustomOperationCreateOneWithoutPermissionInput
  users: UserCreateManyWithoutPermissionsInput
}

input PermissionCreateWithoutUsersInput {
  name: String!
  type: PermissionType!
  resourceName: String
  allowedOperation: CrudOperation
  customOperation: CustomOperationCreateOneWithoutPermissionInput
  groups: PermissionGroupCreateManyWithoutPermissionsInput
}

type PermissionEdge {
  node: Permission!
  cursor: String!
}

type PermissionGroupConnection {
  pageInfo: PageInfo!
  edges: [PermissionGroupEdge]!
  aggregate: AggregatePermissionGroup!
}

input PermissionGroupCreateInput {
  name: String!
  permissions: PermissionCreateManyWithoutGroupsInput
  users: UserCreateManyWithoutGroupsInput
}

input PermissionGroupCreateManyWithoutPermissionsInput {
  create: [PermissionGroupCreateWithoutPermissionsInput!]
  connect: [PermissionGroupWhereUniqueInput!]
}

input PermissionGroupCreateManyWithoutUsersInput {
  create: [PermissionGroupCreateWithoutUsersInput!]
  connect: [PermissionGroupWhereUniqueInput!]
}

input PermissionGroupCreateWithoutPermissionsInput {
  name: String!
  users: UserCreateManyWithoutGroupsInput
}

input PermissionGroupCreateWithoutUsersInput {
  name: String!
  permissions: PermissionCreateManyWithoutGroupsInput
}

type PermissionGroupEdge {
  node: PermissionGroup!
  cursor: String!
}

enum PermissionGroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PermissionGroupPreviousValues {
  id: ID!
  name: String!
}

type PermissionGroupSubscriptionPayload {
  mutation: MutationType!
  node: PermissionGroup
  updatedFields: [String!]
  previousValues: PermissionGroupPreviousValues
}

input PermissionGroupSubscriptionWhereInput {
  AND: [PermissionGroupSubscriptionWhereInput!]
  OR: [PermissionGroupSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PermissionGroupWhereInput
}

input PermissionGroupUpdateInput {
  name: String
  permissions: PermissionUpdateManyWithoutGroupsInput
  users: UserUpdateManyWithoutGroupsInput
}

input PermissionGroupUpdateManyWithoutPermissionsInput {
  create: [PermissionGroupCreateWithoutPermissionsInput!]
  connect: [PermissionGroupWhereUniqueInput!]
  disconnect: [PermissionGroupWhereUniqueInput!]
  delete: [PermissionGroupWhereUniqueInput!]
  update: [PermissionGroupUpdateWithoutPermissionsInput!]
  upsert: [PermissionGroupUpsertWithoutPermissionsInput!]
}

input PermissionGroupUpdateManyWithoutUsersInput {
  create: [PermissionGroupCreateWithoutUsersInput!]
  connect: [PermissionGroupWhereUniqueInput!]
  disconnect: [PermissionGroupWhereUniqueInput!]
  delete: [PermissionGroupWhereUniqueInput!]
  update: [PermissionGroupUpdateWithoutUsersInput!]
  upsert: [PermissionGroupUpsertWithoutUsersInput!]
}

input PermissionGroupUpdateWithoutPermissionsDataInput {
  name: String
  users: UserUpdateManyWithoutGroupsInput
}

input PermissionGroupUpdateWithoutPermissionsInput {
  where: PermissionGroupWhereUniqueInput!
  data: PermissionGroupUpdateWithoutPermissionsDataInput!
}

input PermissionGroupUpdateWithoutUsersDataInput {
  name: String
  permissions: PermissionUpdateManyWithoutGroupsInput
}

input PermissionGroupUpdateWithoutUsersInput {
  where: PermissionGroupWhereUniqueInput!
  data: PermissionGroupUpdateWithoutUsersDataInput!
}

input PermissionGroupUpsertWithoutPermissionsInput {
  where: PermissionGroupWhereUniqueInput!
  update: PermissionGroupUpdateWithoutPermissionsDataInput!
  create: PermissionGroupCreateWithoutPermissionsInput!
}

input PermissionGroupUpsertWithoutUsersInput {
  where: PermissionGroupWhereUniqueInput!
  update: PermissionGroupUpdateWithoutUsersDataInput!
  create: PermissionGroupCreateWithoutUsersInput!
}

input PermissionGroupWhereInput {
  AND: [PermissionGroupWhereInput!]
  OR: [PermissionGroupWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
}

input PermissionGroupWhereUniqueInput {
  id: ID
  name: String
}

enum PermissionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  resourceName_ASC
  resourceName_DESC
  allowedOperation_ASC
  allowedOperation_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PermissionPreviousValues {
  id: ID!
  name: String!
  type: PermissionType!
  resourceName: String
  allowedOperation: CrudOperation
}

type PermissionSubscriptionPayload {
  mutation: MutationType!
  node: Permission
  updatedFields: [String!]
  previousValues: PermissionPreviousValues
}

input PermissionSubscriptionWhereInput {
  AND: [PermissionSubscriptionWhereInput!]
  OR: [PermissionSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PermissionWhereInput
}

enum PermissionType {
  CRUD
  CUSTOM
}

input PermissionUpdateInput {
  name: String
  type: PermissionType
  resourceName: String
  allowedOperation: CrudOperation
  customOperation: CustomOperationUpdateOneWithoutPermissionInput
  users: UserUpdateManyWithoutPermissionsInput
  groups: PermissionGroupUpdateManyWithoutPermissionsInput
}

input PermissionUpdateManyWithoutGroupsInput {
  create: [PermissionCreateWithoutGroupsInput!]
  connect: [PermissionWhereUniqueInput!]
  disconnect: [PermissionWhereUniqueInput!]
  delete: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithoutGroupsInput!]
  upsert: [PermissionUpsertWithoutGroupsInput!]
}

input PermissionUpdateManyWithoutUsersInput {
  create: [PermissionCreateWithoutUsersInput!]
  connect: [PermissionWhereUniqueInput!]
  disconnect: [PermissionWhereUniqueInput!]
  delete: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithoutUsersInput!]
  upsert: [PermissionUpsertWithoutUsersInput!]
}

input PermissionUpdateOneWithoutCustomOperationInput {
  create: PermissionCreateWithoutCustomOperationInput
  connect: PermissionWhereUniqueInput
  disconnect: PermissionWhereUniqueInput
  delete: PermissionWhereUniqueInput
  update: PermissionUpdateWithoutCustomOperationInput
  upsert: PermissionUpsertWithoutCustomOperationInput
}

input PermissionUpdateWithoutCustomOperationDataInput {
  name: String
  type: PermissionType
  resourceName: String
  allowedOperation: CrudOperation
  users: UserUpdateManyWithoutPermissionsInput
  groups: PermissionGroupUpdateManyWithoutPermissionsInput
}

input PermissionUpdateWithoutCustomOperationInput {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateWithoutCustomOperationDataInput!
}

input PermissionUpdateWithoutGroupsDataInput {
  name: String
  type: PermissionType
  resourceName: String
  allowedOperation: CrudOperation
  customOperation: CustomOperationUpdateOneWithoutPermissionInput
  users: UserUpdateManyWithoutPermissionsInput
}

input PermissionUpdateWithoutGroupsInput {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateWithoutGroupsDataInput!
}

input PermissionUpdateWithoutUsersDataInput {
  name: String
  type: PermissionType
  resourceName: String
  allowedOperation: CrudOperation
  customOperation: CustomOperationUpdateOneWithoutPermissionInput
  groups: PermissionGroupUpdateManyWithoutPermissionsInput
}

input PermissionUpdateWithoutUsersInput {
  where: PermissionWhereUniqueInput!
  data: PermissionUpdateWithoutUsersDataInput!
}

input PermissionUpsertWithoutCustomOperationInput {
  where: PermissionWhereUniqueInput!
  update: PermissionUpdateWithoutCustomOperationDataInput!
  create: PermissionCreateWithoutCustomOperationInput!
}

input PermissionUpsertWithoutGroupsInput {
  where: PermissionWhereUniqueInput!
  update: PermissionUpdateWithoutGroupsDataInput!
  create: PermissionCreateWithoutGroupsInput!
}

input PermissionUpsertWithoutUsersInput {
  where: PermissionWhereUniqueInput!
  update: PermissionUpdateWithoutUsersDataInput!
  create: PermissionCreateWithoutUsersInput!
}

input PermissionWhereInput {
  AND: [PermissionWhereInput!]
  OR: [PermissionWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: PermissionType
  type_not: PermissionType
  type_in: [PermissionType!]
  type_not_in: [PermissionType!]
  resourceName: String
  resourceName_not: String
  resourceName_in: [String!]
  resourceName_not_in: [String!]
  resourceName_lt: String
  resourceName_lte: String
  resourceName_gt: String
  resourceName_gte: String
  resourceName_contains: String
  resourceName_not_contains: String
  resourceName_starts_with: String
  resourceName_not_starts_with: String
  resourceName_ends_with: String
  resourceName_not_ends_with: String
  allowedOperation: CrudOperation
  allowedOperation_not: CrudOperation
  allowedOperation_in: [CrudOperation!]
  allowedOperation_not_in: [CrudOperation!]
  customOperation: CustomOperationWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  groups_every: PermissionGroupWhereInput
  groups_some: PermissionGroupWhereInput
  groups_none: PermissionGroupWhereInput
}

input PermissionWhereUniqueInput {
  id: ID
  name: String
}

type Query {
  customOperations(where: CustomOperationWhereInput, orderBy: CustomOperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CustomOperation]!
  permissions(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Permission]!
  permissionGroups(where: PermissionGroupWhereInput, orderBy: PermissionGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PermissionGroup]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  customOperation(where: CustomOperationWhereUniqueInput!): CustomOperation
  permission(where: PermissionWhereUniqueInput!): Permission
  permissionGroup(where: PermissionGroupWhereUniqueInput!): PermissionGroup
  user(where: UserWhereUniqueInput!): User
  customOperationsConnection(where: CustomOperationWhereInput, orderBy: CustomOperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CustomOperationConnection!
  permissionsConnection(where: PermissionWhereInput, orderBy: PermissionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionConnection!
  permissionGroupsConnection(where: PermissionGroupWhereInput, orderBy: PermissionGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PermissionGroupConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ROOT
  SUPER_USER
  USER
}

type Subscription {
  customOperation(where: CustomOperationSubscriptionWhereInput): CustomOperationSubscriptionPayload
  permission(where: PermissionSubscriptionWhereInput): PermissionSubscriptionPayload
  permissionGroup(where: PermissionGroupSubscriptionWhereInput): PermissionGroupSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  role: Role!
  groups: PermissionGroupCreateManyWithoutUsersInput
  permissions: PermissionCreateManyWithoutUsersInput
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutPermissionsInput {
  create: [UserCreateWithoutPermissionsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutGroupsInput {
  email: String!
  password: String!
  name: String!
  role: Role!
  permissions: PermissionCreateManyWithoutUsersInput
}

input UserCreateWithoutPermissionsInput {
  email: String!
  password: String!
  name: String!
  role: Role!
  groups: PermissionGroupCreateManyWithoutUsersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  role: Role!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: Role
  groups: PermissionGroupUpdateManyWithoutUsersInput
  permissions: PermissionUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutGroupsInput!]
  upsert: [UserUpsertWithoutGroupsInput!]
}

input UserUpdateManyWithoutPermissionsInput {
  create: [UserCreateWithoutPermissionsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithoutPermissionsInput!]
  upsert: [UserUpsertWithoutPermissionsInput!]
}

input UserUpdateWithoutGroupsDataInput {
  email: String
  password: String
  name: String
  role: Role
  permissions: PermissionUpdateManyWithoutUsersInput
}

input UserUpdateWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpdateWithoutPermissionsDataInput {
  email: String
  password: String
  name: String
  role: Role
  groups: PermissionGroupUpdateManyWithoutUsersInput
}

input UserUpdateWithoutPermissionsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPermissionsDataInput!
}

input UserUpsertWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserUpsertWithoutPermissionsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPermissionsDataInput!
  create: UserCreateWithoutPermissionsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  groups_every: PermissionGroupWhereInput
  groups_some: PermissionGroupWhereInput
  groups_none: PermissionGroupWhereInput
  permissions_every: PermissionWhereInput
  permissions_some: PermissionWhereInput
  permissions_none: PermissionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
