# import User, Permission, PermissionGroup, Role, PermissionType, CrudOperation from "./generated/prisma.graphql"
# import UserWhereInput, UserOrderByInput from "./generated/prisma.graphql"
# import PermissionWhereInput, PermissionOrderByInput from "./generated/prisma.graphql"
# import PermissionGroupWhereInput, PermissionGroupOrderByInput from "./generated/prisma.graphql"

type Query {
  users(
    where: UserWhereInput,
    orderBy: UserOrderByInput,
    skip: Int,
    after: String,
    before: String,
    first: Int,
    last: Int,
  ): [User!]!
  user(
    id: ID! 
  ): User!
  me: User!
  permissions(
    where: PermissionWhereInput,
    orderBy: PermissionOrderByInput,
    skip: Int,
    after: String,
    before: String,
    first: Int,
    last: Int,
  ): [Permission!]!
  permission(
    id: ID! 
  ): Permission!
  permissionGroups(
    where: PermissionGroupWhereInput,
    orderBy: PermissionGroupOrderByInput,
    skip: Int,
    after: String,
    before: String,
    first: Int,
    last: Int, 
  ): [PermissionGroup!]!
  permissionGroup(
    id: ID!
  ): PermissionGroup!
}

type Mutation {
  updateUser(data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  addUserPermissions(id: ID!, permissionIds: [ID!]!): User!
  removeUserPermissions(id: ID!, permissionIds: [ID!]!): User!
  addUserToGroups(id: ID!, permissionGroupIds: [ID!]!): User!
  removeUserFromGroups(id: ID!, permissionGroupIds: [ID!]!): User!

  createPermission(data: CreatePermissionInput!): Permission!
  updatePermission(data: UpdatePermissionInput!): Permission!
  deletePermission(id: ID!): Permission!

  createPermissionGroup(data: CreatePermissionGroupInput!): PermissionGroup!
  updatePermissionGroup(data: UpdatePermissionGroupInput!): PermissionGroup!
  deletePermissionGroup(id: ID!): PermissionGroup!

  login(
    email: String!
    password: String!
  ) : AuthPayload!

  signup(
    email: String!
    password: String!
    name: String!
    role: Role!
  ) : AuthPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

# Inputs

input UpdateUserInput {
  id: ID!
  name: String
  role: Role
}

input CreatePermissionInput {
  name: String!
  type: PermissionType!
  resourceName: String
  allowedOperation: CrudOperation
}

input UpdatePermissionInput {
  name: String
}

input CreatePermissionGroupInput {
  name: String!
  permissionIds: [ID!]!
  userIds: [ID!]!
}

input UpdatePermissionGroupInput {
  name: String!
}
